import { describe, expect, it } from 'vitest'
import { generatePalette } from '.'

describe('generatePalette', () => {
  describe('单色调色板 (monochromatic)', () => {
    it('应该生成指定数量的单色调色板', () => {
      const palette = generatePalette('#3498db', { type: 'monochromatic', count: 5 })
      expect(palette).toHaveLength(5)
      expect(palette!.every(color => color.startsWith('#'))).toBe(true)
    })

    it('应该包含基础颜色（当 includeBase 为 true）', () => {
      const baseColor = '#3498db'
      const palette = generatePalette(baseColor, { type: 'monochromatic', includeBase: true })
      expect(palette).toContain(baseColor)
    })

    it('应该不包含基础颜色（当 includeBase 为 false）', () => {
      const baseColor = '#3498db'
      const palette = generatePalette(baseColor, { type: 'monochromatic', includeBase: false })
      expect(palette).not.toContain(baseColor)
    })

    it('should trigger sorting when base color is not in palette', () => {
      // Use a base color with specific lightness that won't be generated by the algorithm
      const baseColor = '#808080' // 50% lightness
      const palette = generatePalette(baseColor, { type: 'monochromatic', count: 3, includeBase: true })
      expect(palette).toContain(baseColor)
      expect(palette).toHaveLength(3)
    })

    it('should handle edge case where base color is already in palette', () => {
      // Use a color that might be generated by the algorithm
      const baseColor = '#333333' // Dark color
      const palette = generatePalette(baseColor, { type: 'monochromatic', count: 5, includeBase: true })
      expect(palette).toHaveLength(5)
    })
  })

  describe('类似色调色板 (analogous)', () => {
    it('应该生成类似色调色板', () => {
      const palette = generatePalette('#ff6b6b', { type: 'analogous', count: 3 })
      expect(palette).toHaveLength(3)
      expect(palette!.every(color => color.startsWith('#'))).toBe(true)
    })

    it('应该返回十六进制格式', () => {
      const palette = generatePalette('rgb(255, 107, 107)', { type: 'analogous', count: 3 })
      expect(palette!.every(color => color.startsWith('#'))).toBe(true)
    })
  })

  describe('互补色调色板 (complementary)', () => {
    it('应该生成互补色调色板', () => {
      const palette = generatePalette('#ff0000', { type: 'complementary' })
      expect(palette!.length).toBeGreaterThanOrEqual(2)
      expect(palette!.every(color => color.startsWith('#'))).toBe(true)
    })

    it('应该包含互补色', () => {
      const palette = generatePalette('hsl(0, 100%, 50%)', { type: 'complementary', includeBase: true })
      expect(palette).toContain('#ff0000') // 基础红色的十六进制格式
      // 互补色应该是青色
      expect(palette).toContain('#00ffff') // 青色的十六进制格式
    })

    it('should exclude base color when includeBase is false', () => {
      const baseColor = '#ff0000'
      const palette = generatePalette(baseColor, { type: 'complementary', includeBase: false })
      expect(palette).not.toContain(baseColor)
      expect(palette!.length).toBeGreaterThanOrEqual(1)
    })

    it('should generate additional colors when count > 2', () => {
      const palette = generatePalette('#ff0000', { type: 'complementary', count: 6, includeBase: true })
      expect(palette).toHaveLength(6)
      expect(palette!.every(color => color.startsWith('#'))).toBe(true)
    })

    it('should generate additional colors with alternating lightness', () => {
      const palette = generatePalette('#ff0000', { type: 'complementary', count: 8, includeBase: true })
      expect(palette).toHaveLength(8)
      expect(palette!.every(color => color.startsWith('#'))).toBe(true)
    })

    it('should generate additional colors without base', () => {
      const palette = generatePalette('#ff0000', { type: 'complementary', count: 5, includeBase: false })
      expect(palette).toHaveLength(5)
      expect(palette).not.toContain('#ff0000')
    })
  })

  describe('三角色调色板 (triadic)', () => {
    it('应该生成三角色调色板', () => {
      const palette = generatePalette('#ff0000', { type: 'triadic', includeBase: true })
      expect(palette).toHaveLength(3)
    })

    it('应该不包含基础颜色（当 includeBase 为 false）', () => {
      const baseColor = '#ff0000'
      const palette = generatePalette(baseColor, { type: 'triadic', includeBase: false })
      expect(palette).toHaveLength(2)
      expect(palette).not.toContain(baseColor)
    })
  })

  describe('四角色调色板 (tetradic)', () => {
    it('应该生成四角色调色板', () => {
      const palette = generatePalette('#ff0000', { type: 'tetradic', includeBase: true })
      expect(palette).toHaveLength(4)
    })

    it('应该返回十六进制格式', () => {
      const palette = generatePalette('hsl(0, 100%, 50%)', { type: 'tetradic' })
      expect(palette!.every(color => color.startsWith('#'))).toBe(true)
    })
  })

  describe('分裂互补色调色板 (split-complementary)', () => {
    it('应该生成分裂互补色调色板', () => {
      const palette = generatePalette('#ff0000', { type: 'split-complementary', includeBase: true })
      expect(palette).toHaveLength(3)
    })

    it('应该不包含基础颜色（当 includeBase 为 false）', () => {
      const baseColor = '#ff0000'
      const palette = generatePalette(baseColor, { type: 'split-complementary', includeBase: false })
      expect(palette).toHaveLength(2)
      expect(palette).not.toContain(baseColor)
    })
  })

  describe('默认参数', () => {
    it('应该使用默认参数', () => {
      const palette = generatePalette('#3498db')
      expect(palette).toHaveLength(5) // 默认 count
      expect(palette).toContain('#3498db') // 默认 includeBase: true
    })

    it('应该默认使用单色调色板', () => {
      const monochromaticPalette = generatePalette('#3498db', { type: 'monochromatic' })
      const defaultPalette = generatePalette('#3498db')
      expect(defaultPalette).toEqual(monochromaticPalette)
    })
  })

  describe('边界情况', () => {
    it('应该处理 count = 1', () => {
      const palette = generatePalette('#ff0000', { count: 1 })
      expect(palette).toHaveLength(1)
    })

    it('应该处理大的 count 值', () => {
      const palette = generatePalette('#ff0000', { count: 10 })
      expect(palette).toHaveLength(10)
    })

    it('应该处理无效的调色板类型', () => {
      // @ts-expect-error - 测试无效类型
      const palette = generatePalette('#ff0000', { type: 'invalid' })
      expect(palette!.length).toBeGreaterThan(0)
    })
  })

  describe('颜色质量', () => {
    it('生成的颜色应该是有效的', () => {
      const palette = generatePalette('#3498db', { type: 'monochromatic', count: 5 })
      palette!.forEach((color) => {
        expect(color).toMatch(/^#[0-9a-f]{6}$/i)
      })
    })

    it('单色调色板应该有不同的亮度', () => {
      const palette = generatePalette('#3498db', { type: 'monochromatic', count: 5 })
      const lightnesses = palette!.map((color) => {
        // 简单检查颜色是否不同
        return color
      })
      const uniqueLightnesses = new Set(lightnesses)
      expect(uniqueLightnesses.size).toBeGreaterThan(1)
    })
  })

  describe('includeBase 选项', () => {
    it('should exclude base color when includeBase is false', () => {
      const baseColor = '#3498db'
      const palette = generatePalette(baseColor, {
        type: 'monochromatic',
        count: 5,
        includeBase: false,
      })
      expect(palette).not.toContain(baseColor)
      // For monochromatic palette, it still generates the requested count
      expect(palette).toHaveLength(5)
    })

    it('should include base color when includeBase is true (default)', () => {
      const baseColor = '#3498db'
      const palette = generatePalette(baseColor, {
        type: 'monochromatic',
        count: 5,
        includeBase: true,
      })
      expect(palette).toContain(baseColor)
      expect(palette).toHaveLength(5)
    })

    it('should exclude base color for analogous palette', () => {
      const baseColor = '#3498db'
      const palette = generatePalette(baseColor, {
        type: 'analogous',
        count: 5,
        includeBase: false,
      })
      expect(palette).not.toContain(baseColor)
      // For analogous palette, it filters out the base color
      expect(palette!.length).toBeLessThan(5)
    })
  })

  describe('实际使用场景', () => {
    it('应该适合创建网站主题色', () => {
      const brandColor = '#2c3e50'
      const palette = generatePalette(brandColor, { type: 'monochromatic', count: 5 })
      expect(palette).toContain(brandColor)
      expect(palette).toHaveLength(5)
    })

    it('应该适合创建对比色方案', () => {
      const primaryColor = '#e74c3c'
      const palette = generatePalette(primaryColor, { type: 'complementary' })
      expect(palette!.length).toBeGreaterThanOrEqual(2)
    })

    it('应该适合创建丰富的调色板', () => {
      const baseColor = '#9b59b6'
      const palette = generatePalette(baseColor, { type: 'tetradic' })
      expect(palette).toHaveLength(4)
    })
  })

  describe('错误处理', () => {
    it('应该处理无效颜色字符串', () => {
      const result = generatePalette('invalid-color')
      expect(result).toBe(null)
    })

    it('应该处理空字符串', () => {
      const result = generatePalette('')
      expect(result).toBe(null)
    })

    it('应该处理 null 输入', () => {
      const result = generatePalette(null as any)
      expect(result).toBe(null)
    })
  })

  describe('hSL 值边界情况', () => {
    it('应该正确处理四角色调色板中 HSL 值为 undefined 的颜色', () => {
      // 测试当基础颜色的 HSL 值为 undefined 时的默认值处理
      const edgeCaseColor = {
        mode: 'hsl',
        h: undefined,
        s: undefined,
        l: undefined,
        alpha: undefined,
      } as any

      const result = generatePalette(edgeCaseColor, { type: 'tetradic' })
      expect(result).toHaveLength(4)
      expect(result!.every(color => color.startsWith('#'))).toBe(true)
    })

    it('应该正确处理分裂互补色调色板中 HSL 值为 undefined 的颜色', () => {
      // 测试当基础颜色的 HSL 值为 undefined 时的默认值处理
      const edgeCaseColor = {
        mode: 'hsl',
        h: undefined,
        s: undefined,
        l: undefined,
        alpha: undefined,
      } as any

      const result = generatePalette(edgeCaseColor, { type: 'split-complementary' })
      expect(result).toHaveLength(3)
      expect(result!.every(color => color.startsWith('#'))).toBe(true)
    })

    it('应该正确处理互补色调色板中 HSL 值为 undefined 的颜色（数量大于2）', () => {
      // 测试当基础颜色的 HSL 值为 undefined 时的默认值处理
      const edgeCaseColor = {
        mode: 'hsl',
        h: undefined,
        s: undefined,
        l: undefined,
        alpha: undefined,
      } as any

      const result = generatePalette(edgeCaseColor, { type: 'complementary', count: 5 })
      expect(result).toHaveLength(5)
      expect(result!.every(color => color.startsWith('#'))).toBe(true)
    })

    it('应该正确处理三角色调色板中 HSL 值为 undefined 的颜色', () => {
      // 测试当基础颜色的 HSL 值为 undefined 时的默认值处理
      const edgeCaseColor = {
        mode: 'hsl',
        h: undefined,
        s: undefined,
        l: undefined,
        alpha: undefined,
      } as any

      const result = generatePalette(edgeCaseColor, { type: 'triadic' })
      expect(result).toHaveLength(3)
      expect(result!.every(color => color.startsWith('#'))).toBe(true)
    })

    it('应该正确处理单色调色板中 HSL 值为 undefined 的颜色', () => {
      // 测试当基础颜色的 HSL 值为 undefined 时的默认值处理
      const edgeCaseColor = {
        mode: 'hsl',
        h: undefined,
        s: undefined,
        l: undefined,
        alpha: undefined,
      } as any

      const result = generatePalette(edgeCaseColor, { type: 'monochromatic', count: 3 })
      expect(result).toHaveLength(3)
      expect(result!.every(color => color.startsWith('#'))).toBe(true)
    })

    it('应该正确处理类似色调色板中 HSL 值为 undefined 的颜色', () => {
      // 测试当基础颜色的 HSL 值为 undefined 时的默认值处理
      const edgeCaseColor = {
        mode: 'hsl',
        h: undefined,
        s: undefined,
        l: undefined,
        alpha: undefined,
      } as any

      const result = generatePalette(edgeCaseColor, { type: 'analogous', count: 3 })
      expect(result).toHaveLength(3)
      expect(result!.every(color => color.startsWith('#'))).toBe(true)
    })

    it('应该正确处理单色调色板的颜色排序', () => {
      // 测试当基础颜色不包含在生成的调色板中时的排序功能
      const result = generatePalette('#ff0000', {
        type: 'monochromatic',
        count: 5,
        includeBase: false,
      })
      expect(result).toHaveLength(5)
      expect(result!.every(color => color.startsWith('#'))).toBe(true)
    })

    it('应该正确处理排序时亮度值为 undefined 的颜色', () => {
      // 测试当颜色对象的亮度值为 undefined 时的排序处理
      const edgeCaseColor = {
        mode: 'hsl',
        h: 0,
        s: 0.5,
        l: undefined,
        alpha: 1,
      } as any

      const result = generatePalette(edgeCaseColor, {
        type: 'monochromatic',
        count: 3,
        includeBase: false,
      })
      expect(result).toHaveLength(3)
      expect(result!.every(color => color.startsWith('#'))).toBe(true)
    })
  })
})
